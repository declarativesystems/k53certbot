apiVersion: v1.1
resources:
  - name: gitK53Certbot
    type: GitRepo
    configuration:
      gitProvider: githubAccountGeoffwilliams
      path: declarativesystems/k53certbot

pipelines:
  - name: k53certbot
    configuration:
      runtime:
        type: image
        image:
          custom:
            name: "declarativesystems.jfrog.io/docker-local/pipelines"
            tag: "0.4.0-23"
            registry: artifactory
            sourceRepository: docker-local

    steps:
      - name: pipInstall
        type: declarativesystems/PipInstall
        configuration:
          affinityGroup: python_k53certbot
          sourceArtifactory: artifactory
          sourceLocation: $res_gitK53Certbot_resourcePath
          repositoryName: pypi
          integrations:
            - name: artifactory
          inputResources:
            - name: gitK53Certbot
        execution:
          onFailure:
            - env

      - name: pythonWheelDeploy
        type: declarativesystems/PythonWheelDeploy
        configuration:
          affinityGroup: python_k53certbot
          sourceArtifactory: artifactory # name of artifactory integration to publish artefacts to
          repositoryName: pypi-local # repository to publish artefacts to
          sourceLocation: $res_gitK53Certbot_resourcePath # where to find sources to build
          integrations:
            - name: artifactory # grant access to integration
          inputResources:
            - name: gitK53Certbot
          inputSteps:
            - name: pipInstall

      - name: binaryK53Certbot
        type: declarativesystems/ArtifactoryDownload
        configuration:
          affinityGroup: docker_k53certbot
          sourceArtifactory: artifactory
          path: pypi-local/k53certbot/${k53CertbotVersion}/k53certbot-${k53CertbotVersion}-py3-none-any.whl
          integrations:
            - name: artifactory
          inputSteps:
            - name: pythonWheelDeploy
          inputResources:
            - name: gitK53Certbot
        execution:
          onStart:
            - cd $res_gitK53Certbot_resourcePath
            - add_pipeline_variables k53CertbotVersion=$(make print_version)

      - name: buildAndPushImage
        type: Bash
        configuration:
          affinityGroup: docker_k53certbot
          inputResources:
            - name: gitK53Certbot
          integrations:
            - name: quayIo
          inputSteps:
            - name: binaryK53Certbot
        execution:
          onExecute:
            - cd $res_gitK53Certbot_resourcePath
            - mkdir -p dist
            - cp $res_binaryK53Certbot_resourcePath dist
            - podman login "$int_quayIo_url" --password $(echo "$int_quayIo_password") --username $(echo "$int_quayIo_username")

            - make image_build
            - make ci_image_push
          onFailure:
            - tree -L 4
            - env
